// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import React, { useState } from 'react'
//
// // Styles
// const modal: React.CSSProperties = {
//   position: 'fixed',
//   zIndex: 1,
//   left: 0,
//   top: 0,
//   width: '100%',
//   height: '100%',
//   overflow: 'auto',
//   backgroundColor: 'rgba(23,26,38,0.26)'
// }
//
// const modalContent: React.CSSProperties = {
//   backgroundColor: '#fefefe',
//   margin: '15% auto',
//   padding: '20px',
//   border: '1px solid #888',
//   width: '80%'
// }
//
//
// // Reducer
// const initState = {goodThings: [] as any[]}
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case 'LIKE':
//       return {
//         ...state,
//         goodThings: [action.thing, ...state.goodThings]
//       }
//   }
//   return state
// }
//
// // Store
// const rootReducer = combineReducers({app: appReducer})
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const addThing = (thing: any) => ({type: 'LIKE', thing} as const)
// type ActionsType = ReturnType<typeof addThing>
//
// const Modal = (props: any) => {
//   return (
//     <div style={modalContent}>
//       modal:
//   <input
//     value={props.value}
//   onChange={e => props.setValue(e.target.value)}
//   />
//   <button onClick={props.add}>add</button>
//     </div>
// )
// }
//
// // Components
// export const Animals = () => {
//   const goodThings = useAppSelector(state => state.app.goodThings)
//   const dispatch = useAppDispatch()
//
//   const [value, setValue] = useState('')
//   const [show, setShow] = useState(false)
//
//   const mapped = goodThings.map((t: any, i: number) => <div key={i}>{t}</div>)
//
//   return (
//     <div style={modal}>
//     <button onClick={() => setShow(true)}>show modal</button>
//
//   {show && (
//     <Modal
//       value={value}
//     setValue={setValue}
//     add={() => {
//     dispatch(addThing(value))
//     setValue('')
//   }}
//     />
//   )}
//
//   {mapped}
//   </div>
// )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Animals/>
//     </Provider>
// );

// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–¥–∞–ª–∫—É, –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ add.
// // –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Å–Ω–∏–∑—É, –Ω–æ –º–æ–¥–∞–ª–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –≤–∏–¥–∏–º–æ–π.
//
// // ü™õ –ó–∞–¥–∞—á–∞:
// // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –º–æ–¥–∞–ª–∫–∞ –ø—Ä—è—Ç–∞–ª–∞—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
//
// /–æ—Ç–≤–µ—Ç:  setShow(false)
// ===============================================================================================================>


// import React from 'react'
// import ReactDOM from 'react-dom/client';
//
// export const App = () => {
//   return (
//     <div>
//       <h2>–ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è master –æ—Ç origin master ?</h2>
//     <ul>
//     <li>1 - –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ 2 –≤–µ—Ç–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏. –ò—Ö –Ω–∏—á–µ–≥–æ –Ω–µ —Å–≤—è–∑—ã–≤–∞–µ—Ç</li>
//   <li>2 - master –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é, origin master - —É–¥–∞–ª–µ–Ω–Ω–æ–º—É</li>
//   <li>3 - –≠—Ç–æ 2 –Ω–∞–∑–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –≤–µ—Ç–∫–∏. –ü—Ä–∏—Å—Ç–∞–≤–∫–∞ origin –Ω–µ –Ω–µ—Å–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Å–º—ã—Å–ª–∞.</li>
//   <li>4 - –í–µ—Ç–∫–∏ origin master –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</li>
//   <li>5 - –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</li>
//   </ul>
//   </div>
// )
// }
// –û—Ç–≤–µ—Ç 2
//=======================================================================================>


// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import React, { useEffect } from 'react'
// import axios from 'axios'
//
// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: 'collapse',
//   width: '100%',
//   tableLayout: 'fixed',
// }
//
// const th: React.CSSProperties = {
//   padding: '10px',
//   border: '1px solid black',
//   background: 'lightgray',
//   cursor: 'pointer'
// }
//
// const td: React.CSSProperties = {
//   padding: '10px',
//   border: '1px solid black'
// }
//
// // Types
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// }
//
// type UsersResponseType = {
//   items: UserType[]
//   totalCount: number
// }
//
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//   getUsers() {
//     return instance.get<UsersResponseType>('users')
//   },
// }
//
// // Reducer
// const initState = {
//   users: [] as UserType[],
// }
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case 'SET_USERS':
//       return {...state, users: action.users}
//     default:
//       return state
//   }
// }
//
// // Store
// const rootReducer = combineReducers({app: appReducer})
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const setUsersAC = (users: UserType[]) => ({type: 'SET_USERS', users})
// type ActionsType = ReturnType<typeof setUsersAC>
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch, getState) => {
//   api.getUsers()
//     .then(res => dispatch(setUsersAC(res.data.items)))
// }
//
// // Components
// export const Users = () => {
//   const users = useAppSelector(state => state.app.users)
//
//   const dispatch = useAppDispatch()
//
//   useEffect(() => {
//     dispatch(getUsersTC())
//   }, [])
//
//   return (
//     <div>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//   <table style={table}>
//   <thead>
//     <tr>
//       <th style={th}> Name</th>
//     <th style={th}> Age</th>
//     </tr>
//     </thead>
//     <tbody>
//     {
//       users.map(u => (
//         <tr key={u.id}>
//         <td style={td}>{u.name}</td>
//           <td style={td}>{u.age}</td>
//       </tr>
// ))
// }
//   </tbody>
//   </table>
//   </div>
// )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Users/>
//     </Provider>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å, —Ç.–∫. –≤ –∫–æ–¥–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–π—Ç–∏ –±–∞–≥—É, —á—Ç–æ–±—ã —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∞—Å—å.
// –í –∫–∞—á–µ—Å—Ç–≤–µ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞
// ‚ùó –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, –≤ –æ—Ç–≤–µ—Ç–∞—Ö —É—á—Ç–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {users.map(u) => —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç—Ä–∏—Å—É–π—Å—è –í–ñ–£–• –í–ñ–£–•}
// =======================================================================================================>



//import React from 'react';
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
//
// // Reducer
// const initState = {
//   work: 0,
//   donate: 0,
//   balance: 0,
// }
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case 'CHANGE_VALUE':
//       return {
//         ...state,
//         ...action.payload,
//       }
//     default:
//       return state
//   }
// }
//
// // Store
// const rootReducer = combineReducers({app: appReducer})
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const changeValue = (payload: any) => ({type: 'CHANGE_VALUE', payload} as const)
// type ActionsType = ReturnType<typeof changeValue>
//
// // Components
// export const Income = () => {
//   const work = useAppSelector(state => state.app.work)
//   const donate = useAppSelector(state => state.app.donate)
//   const balance = useAppSelector(state => state.app.balance)
//
//   const dispatch = useAppDispatch()
//
//   return (
//     <div>
//       <div>
//         work: <input value={work}
//   type={'number'}
//   onChange={e => dispatch(changeValue({work: +e.target.value}))}/>
//   </div>
//   <div>
//   donate: <input value={donate}
//   type={'number'}
//   onChange={e => dispatch(changeValue({donate: +e.target.value}))}/>
//   </div>
//
//   <h1>üíµ balance: {balance}</h1>
//   <button
//   onClick={() => {
//     // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
//   }}
// >
//   calculate balance
//   </button>
//   </div>
// )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Income/>
//     </Provider>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –≤—ã–≤–µ–ª–∞—Å—å —Å—É–º–º–∞ –¥–æ—Ö–æ–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ –±–∞–ª–∞–Ω—Å–∞
//
// –æ—Ç–≤–µ—Ç: dispatch(changeValue({balance:work+donate}))
// =====================================================================================================>

// import React from 'react';
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
//
// // Reducer
// const initState = {
//   animals: [
//     {likes: 0, name: 'cat'},
//     {likes: 0, name: 'dog'},
//     {likes: 0, name: 'fish'},
//     {likes: 0, name: 'spider'},
//     {likes: 0, name: 'bird'},
//   ] as { likes: number, name: string }[]
// }
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case 'LIKE':
//       return {
//         ...state,
//         animals: state.animals.map(animal => {
//           return true ? {...animal} : animal
//         })
//       }
//   }
//   return state
// }
//
// // Store
// const rootReducer = combineReducers({app: appReducer})
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const like = (likes: any, name: any) => ({type: 'LIKE', likes, name} as const)
// type ActionsType = ReturnType<typeof like>
//
// // Components
// export const Animals = () => {
//   const animals = useAppSelector(state => state.app.animals)
//   const dispatch = useAppDispatch()
//
//   const mapped = animals
//     .map((a: any, i: number) => (
//       <div key={i}>
//       {a.name}
//       -{a.likes}-
//       <button
//         onClick={() => dispatch(like(a.likes + 1, a.name))}
// >
//   Like!
//   </button>
//   </div>
// ))
//
//
//   return (
//     <div>
//       {mapped}
//     </div>
//   )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Animals/>
//     </Provider>
// );
//
// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö.
// –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ like –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ—á–∏–Ω–∏—Ç—å –ª–∞–π–∫–∏.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏
//
// üñ• –æ—Ç–≤–µ—Ç: return animal.name === action.name ? {...animal, likes: action.likes} : animal

// ====================================================================================================>

// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes, useNavigate, useParams } from 'react-router-dom'
// import React from 'react'
//
// type UserType = {
//   id: number
//   name: string
//   avatar: string
//   age: number
//   address: string
// }
//
// const users: UserType[] = [
//   {
//     id: 1,
//     name: 'my Name',
//     age: 32,
//     avatar: '‚Äî‡∏Ö/·ê†.Ã´ .·êü\\‡∏Ö‚Äî',
//     address: 'my Address'
//   },
//   {
//     id: 2,
//     name: 'John',
//     age: 22,
//     avatar: ':)',
//     address: 'California'
//   },
//   {
//     id: 3,
//     name: 'Mike',
//     age: 18,
//     avatar: '^._.^',
//     address: 'New York'
//   },
//   {
//     id: 4,
//     name: 'Emma',
//     age: 38,
//     avatar: '/·ê†-Íûà-·êü\\',
//     address: 'Washington'
//   },
// ]
//
// const StartPage = () => {
//   const navigate = useNavigate()
//   const friends = users.filter(u => u.id !== 1)
//
//   const mappedFriends = friends.map((f, i) => {
//     const go = () => {
//       navigate('/friend/' + f.id)
//     }
//
//     return (
//       <div key={i} onClick={go} style={{paddingLeft: 24, color: 'blue', cursor: 'pointer'}}>
//     {f.name}, {f.age}
//     </div>
//   )
//   })
//
//   return (
//     <div>
//       <h2>üôÇ My profile</h2>
//   <Profile userId={1}/>
//   <hr/>
//   <h2>üë™ Friends</h2>
//   {mappedFriends}
//   </div>
// )
// }
// const Profile: React.FC<{ userId?: number }> = ({userId}) => {
//   const {id} = useParams<{ id: string }>()
//   const user = users.find(u => u.id === +(id || userId || 0))
//
//   return (
//     <div>
//       <div>
//         <b>avatar</b> {user?.avatar}
//     </div>
//     <div>
//     <div><b>name</b>: {user?.name}</div>
//   <div><b>age</b>: {user?.age}</div>
//   <div><b>address</b>: {user?.address}</div>
//   </div>
//   </div>
// )
// }
//
// export const Friends = () => {
//   return (
//     <Routes>
//       <Route path={'/'} element={<StartPage/>}/>
//   <Route path={'friend'} element={<Profile/>}/>
//   <Route path={'*'} element={<div>‚ùå404 Page Not Found‚ùå</div>}/>
//   </Routes>
// )
// }
//
//   const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
//   root.render(
//     <BrowserRouter>
//       <Friends/>
//     </BrowserRouter>
//   );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
// –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π.
// –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ –≤–∏–¥–∏–º ‚ùå404 Page Not Found‚ùå
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥—Ä—É–≥–µ.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
//
// –æ—Ç–≤–µ—Ç: <Route path={'friend/:id'} element={<Profile/>}/>

// =========================================================================>

// import React, { useEffect } from 'react'
// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import { BrowserRouter, Navigate, Route, Routes, useNavigate } from 'react-router-dom'
// import axios from 'axios'
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//   me() {
//     return instance.get('auth/me?delay=3')
//   },
// }
//
//
// // Reducer
// const initState = {
//   isInitialized: false,
//   isLoading: false,
//   isLoggedIn: false
// }
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case 'SET_IS_INITIALIZED':
//       return {...state, isInitialized: action.isInitialized}
//     case 'SET_LOADING':
//       return {...state, isLoading: action.isLoading}
//     case 'SET_IS_LOGGED_IN':
//       return {...state, isLoggedIn: action.isLoggedIn}
//     default:
//       return state
//   }
// }
//
// // Store
// const rootReducer = combineReducers({app: appReducer})
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const setIsInitialized = (isInitialized: boolean) => ({type: 'SET_IS_INITIALIZED', isInitialized} as const)
// const setLoading = (isLoading: boolean) => ({type: 'SET_LOADING', isLoading} as const)
// const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'SET_IS_LOGGED_IN', isLoggedIn} as const)
// type ActionsType =
//   | ReturnType<typeof setLoading>
//   | ReturnType<typeof setIsInitialized>
//   | ReturnType<typeof setIsLoggedIn>
//
// // Thunk
// const me = (): AppThunk => async (dispatch) => {
//   dispatch(setLoading(true))
//   api.me()
//     .then((res) => {
//       dispatch(setIsLoggedIn(true))
//     })
//     .finally(() => {
//       dispatch(setLoading(false))
//       dispatch(setIsInitialized(true))
//     })
//
// }
//
// // Components
// const Loader = () => <h2>üîò –ö—Ä—É—Ç–∏–ª–∫–∞...</h2>
//
// const Login = () => {
//   const isInitialized = useAppSelector(state => state.app.isInitialized)
//   const isLoading = useAppSelector(state => state.app.isLoading)
//   const isLoggedIn = useAppSelector(state => state.app.isLoggedIn)
//
//   if (isLoggedIn) {
//     return <Navigate to={'/'}/>
//   }
//
//   return <h2>üê£ Login</h2>
// }
// const Profile = () => {
//   const isInitialized = useAppSelector(state => state.app.isInitialized)
//   const isLoading = useAppSelector(state => state.app.isLoading)
//   const isLoggedIn = useAppSelector(state => state.app.isLoggedIn)
//
//   if (!isLoggedIn) {
//     return <Navigate to={'/login'}/>
//   }
//
//   return <h2>üòé Profile </h2>
// }
//
// export const App = () => {
//   const isInitialized = useAppSelector(state => state.app.isInitialized)
//   const isLoading = useAppSelector(state => state.app.isLoading)
//   const isLoggedIn = useAppSelector(state => state.app.isLoggedIn)
//
//   const dispatch = useAppDispatch()
//
//   useEffect(() => {
//     dispatch(me())
//   }, [])
//
//   return (
//     <Routes>
//       <Route path={'/'} element={<Profile/>}/>
//   <Route path={'login'} element={<Login/>}/>
//   </Routes>
// )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(
//   <BrowserRouter>
//     <Provider store={store}>
//     <App/>
//     </Provider>
//     </BrowserRouter>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º—ã –≤–∏–¥–∏–º Login, –∞ –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã Profile
// –ù–æ —ç—Ç–æ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ Login,
// –ø–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ,
// –∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å Loader

// –æ—Ç–≤–µ—Ç:  if (!isInitialized || !isLoggedIn || isLoading) {
//     return <Loader />;
//   }

// ===========================================================================================>

// import ReactDOM from 'react-dom/client';
// import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
// import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
// import React, { useEffect } from 'react'
// import axios from 'axios'
//
// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: 'collapse',
//   width: '100%',
//   tableLayout: 'fixed',
// }
//
// const th: React.CSSProperties = {
//   padding: '10px',
//   border: '1px solid black',
//   background: 'lightgray',
//   cursor: 'pointer'
// }
//
// const td: React.CSSProperties = {
//   padding: '10px',
//   border: '1px solid black'
// }
//
// // Types
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// }
//
// type UsersResponseType = {
//   items: UserType[]
//   totalCount: number
// }
//
// type ParamsType = {
//   sortBy: string | null
//   sortDirection: 'asc' | 'desc' | null
// }
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//   getUsers(params?: ParamsType) {
//     return instance.get<UsersResponseType>('users', {params})
//   },
// }
//
// // Reducer
// const initState = {
//   users: [] as UserType[],
//   params: {
//     sortBy: null,
//     sortDirection: 'asc'
//   } as ParamsType
// }
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case 'SET_USERS':
//       return {...state, users: action.users}
//     case 'SET_PARAMS':
//       return {...state, params: {...state.params, ...action.payload}}
//     default:
//       return state
//   }
// }
//
// // Store
// const rootReducer = combineReducers({app: appReducer})
//
// const store = createStore(rootReducer, applyMiddleware(thunk))
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const setUsersAC = (users: UserType[]) => ({type: 'SET_USERS', users} as const)
// const setParamsAC = (payload: ParamsType) => ({type: 'SET_PARAMS', payload} as const)
// type ActionsType =
//   | ReturnType<typeof setUsersAC>
//   | ReturnType<typeof setParamsAC>
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch, getState) => {
//   const params = getState().app.params
//   api.getUsers(params.sortBy ? params : undefined)
//     .then(res => dispatch(setUsersAC(res.data.items)))
// }
//
// export const Users = () => {
//   const users = useAppSelector(state => state.app.users)
//   const sortBy = useAppSelector(state => state.app.params.sortBy)
//   const sortDirection = useAppSelector(state => state.app.params.sortDirection)
//   console.log(users, sortBy, sortDirection)
//
//   const dispatch = useAppDispatch()
//
//   // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
//
//   const sortHandler = (name: string) => {
//     const direction = sortDirection === 'asc' ? 'desc' : 'asc'
//     dispatch(setParamsAC({sortBy: name, sortDirection: direction}))
//   };
//
//   return (
//     <div>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//   <table style={table}>
//   <thead>
//     <tr>
//       <th style={th} onClick={() => sortHandler('name')}>
//   Name
//   </th>
//   <th style={th} onClick={() => sortHandler('age')}>
//   Age
//   </th>
//   </tr>
//   </thead>
//   <tbody>
//   {
//     users.map(u => {
//       return (
//         <tr key={u.id}>
//         <td style={td}>{u.name}</td>
//           <td style={td}>{u.age}</td>
//         </tr>
//     )
//     })
//   }
//   </tbody>
//   </table>
//   </div>
// )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Users/>
//     </Provider>
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –ù–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã:
// 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// 2) –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
// 3) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ –ø–æ–ª–µ 2 —Ä–∞–∑–∞)

// –æ—Ç–≤–µ—Ç useEffect(() => {
//     dispatch(getUsersTC())
//   },[dispatch])

// import axios from 'axios'
// import React, { useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client'
//
// type UserType = {
//   id: string;
//   name: string;
//   age: number;
// }
//
// // API
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})
//
// const api = {
//   getUsers() {
//     return instance.get('users?pageSize=3&pageNumber=2')
//   },
// }
//
// // App
// export const App = () => {
//
//   const [users, setUsers] = useState<UserType[]>([])
//
//   useEffect(() => {
//     api.getUsers()
//       .then((res) => {
//         setUsers(res.data.items)
//       })
//   }, [])
//
//
//   return (
//     <>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//   {
//     users.map(u => {
//       return <div style={{display: 'flex', gap: '10px'}} key={u.id}>
//         <p><b>name</b>: {u.name}</p>
//       <p><b>age</b>: {u.age}</p>
//       </div>
//     })
//   }
//   </>
// )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ –∏–∑ 3-—á–µ–ª–æ–≤–µ–∫.
// –ü–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ, –∞ –∏–∑-–∑–∞ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤—Å–µ —Ç–µ—Ö –∂–µ —é–∑–µ—Ä–æ–≤),
// –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –≤–æ–ø—Ä–æ—Å–∞ –∏ –∞–º–ø–µ—Ä—Å–∞–Ω–¥–∞.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É (–ø–µ—Ä–µ–Ω–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)
